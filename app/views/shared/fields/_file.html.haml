- response = @bid && @bid.responses.where(response_field_id: response_field[:id]).first

= render "shared/pieces/label", response_field: response_field

.fileupload{"class" => (response && response.upload?) ? "fileupload-exists" : "fileupload-new", "data-provides" => "fileupload"}
  .input-append
    .uneditable-input.span3
      %i.icon-file.fileupload-exists
      %span.fileupload-preview= (response && response.upload && response.upload.file) ? response.upload.file.filename.gsub(/\?.*$/, '') : ''

    %span.btn.btn-file
      %span.fileupload-new Select file
      %span.fileupload-exists Change
      %input{"type" => "file", "name" => "response_fields[#{response_field[:id]}]", "data-required" => response_field[:field_options]["required"] ? true : false, "data-trigger" => "change", "data-value" => (response && response.upload?) ? 'exists' : false}

    - # @todo make this dependent on response_field_id, not response_id.
    %a{"href" => "#", "class" => "btn fileupload-exists js-remove-bid-response-upload", "data-method" => "delete", "data-remote" => true} Remove

= render "shared/pieces/description", response_field: response_field
