- provide :page_action, "Bids"

= render layout: "shared/user_sidebar" do

  .action-header-wrapper.above-searchable
    %h4= t('g.bids')
    %a.btn.action-header-btn-h4{"href" => projects_path}
      Browse Projects
      %i.icon-share-alt
    .clearfix

  #searchable-table-page.search-page
    :javascript
      new ProcureIo.Backbone.SearchableTable({
        collection: new ProcureIo.Backbone.Collection({
          url: "#{vendor_bids_path(@vendor, format: 'json')}",
          deepModel: true
        }),
        bootstrapData: #{@bootstrap_data.to_json},
        columns: [
          {
            name: "#{t('g.status')}",
            accessor: function(model){
              return "<a data-toggle='tooltip' title='"+model.get('text_status')+"'>\
                        <span class='badge badge-indicator "+model.get('badge_class')+"'></span>\
                      </a>";
            }
          },
          {
            name: "#{Project.human_attribute_name(:title)}",
            accessor: function(model){
              return "<a href='"+model.get('url')+"'>" + model.get('project.title') + "</a>";
            },
            sortKey: 'title',
          },
          {
            name: "Updated At",
            accessor: function(model){
              return moment(model.get('updated_by_vendor_at')).format(ProcureIo.READABLE);
            },
            sortKey: 'updated_at',
            defaultSort: 'asc'
          },
          {
            name: "#{t('g.bids_due')}",
            accessor: function(model){
              if (model.get('project.bids_due_at')) {
                return moment(model.get('project.bids_due_at')).format(ProcureIo.READABLE);
              } else {
                return I18n.t('g.no_due_date');
              }
            },
            sortKey: 'bids_due_at',
          }
        ],
        actions: false
      });
